{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_chat_window = _resolveComponent(\"chat-window\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_chat_window, {\n    messages: $data.messages\n  }, null, 8 /* PROPS */, [\"messages\"]), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.newMessage = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.newMessage]]), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.sendMessage && $options.sendMessage(...args))\n  }, \"Send\")]);\n}","map":{"version":3,"names":["_createElementBlock","_createVNode","_component_chat_window","messages","$data","_createElementVNode","newMessage","$event","onClick","_cache","args","$options","sendMessage"],"sources":["C:\\Users\\user\\OneDrive\\Desktop\\HiyasProject\\src\\views\\ChatView.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <chat-window :messages=\"messages\" />\r\n    <input v-model=\"newMessage\" />\r\n    <button @click=\"sendMessage\">Send</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport ChatWindow from '@/components/ChatWindow.vue';\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  components: {\r\n    ChatWindow,\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      messages: [],\r\n      newMessage: '',\r\n      refreshInterval: null,\r\n    };\r\n  },\r\n\r\n  methods: {\r\n    async sendMessage() {\r\n      try {\r\n        if (this.newMessage.trim() === '') {\r\n          console.warn('Cannot send an empty message.');\r\n          return;\r\n        }\r\n\r\n        await axios.post('sendMessage', { message: this.newMessage });\r\n        await this.fetchMessages();\r\n        this.$emit('message-sent', this.newMessage);\r\n        this.newMessage = '';\r\n      } catch (error) {\r\n        console.error('Error sending message:', error);\r\n      }\r\n    },\r\n\r\n    async fetchMessages() {\r\n      try {\r\n        // Adjust the URL to include the logged-in user's information\r\n        const response = await axios.get('getMessage', {\r\n          params: {\r\n            // Add parameters based on your authentication mechanism\r\n            // For example, if you have a user ID, you might do:\r\n            userId: this.loggedInUserId,\r\n          },\r\n        });\r\n\r\n        this.messages = response.data;\r\n      } catch (error) {\r\n        console.error('Error fetching messages:', error);\r\n      }\r\n    },\r\n  },\r\n\r\n  computed: {\r\n    loggedInUserId() {\r\n      // Retrieve the logged-in user's ID from your authentication state\r\n      // This is just an example; adjust based on your actual authentication mechanism\r\n      return this.$store.state.user.id;\r\n    },\r\n  },\r\n\r\n  mounted() {\r\n    this.fetchMessages();\r\n    this.refreshInterval = setInterval(() => {\r\n      this.fetchMessages();\r\n    }, 5000);\r\n  },\r\n\r\n  beforeDestroy() {\r\n    clearInterval(this.refreshInterval);\r\n  },\r\n};\r\n</script>\r\n"],"mappings":";;;uBACEA,mBAAA,CAIM,cAHJC,YAAA,CAAoCC,sBAAA;IAAtBC,QAAQ,EAAEC,KAAA,CAAAD;EAAQ,uC,gBAChCE,mBAAA,CAA8B;+DAAdD,KAAA,CAAAE,UAAU,GAAAC,MAAA;iDAAVH,KAAA,CAAAE,UAAU,E,GAC1BD,mBAAA,CAA0C;IAAjCG,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,WAAA,IAAAD,QAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;KAAE,MAAI,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}