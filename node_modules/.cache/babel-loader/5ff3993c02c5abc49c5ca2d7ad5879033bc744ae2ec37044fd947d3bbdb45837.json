{"ast":null,"code":"import ChatWindow from '@/components/ChatWindow.vue';\nimport axios from 'axios';\nexport default {\n  components: {\n    ChatWindow\n  },\n  data() {\n    return {\n      messages: [],\n      newMessage: '',\n      refreshInterval: null // Added for periodic message fetching\n    };\n  },\n\n  methods: {\n    async sendMessage() {\n      try {\n        // Check if the newMessage is not empty before sending\n        if (this.newMessage.trim() === '') {\n          console.warn('Cannot send an empty message.');\n          return;\n        }\n\n        // Perform the Axios POST request to send the message\n        await axios.post('sendMessage', {\n          message: this.newMessage\n        });\n\n        // Fetch updated messages after sending\n        await this.fetchMessages();\n\n        // Optionally, you can emit an event to inform parent components\n        this.$emit('message-sent', this.newMessage);\n\n        // Clear the input field\n        this.newMessage = '';\n      } catch (error) {\n        console.error('Error sending message:', error);\n      }\n    },\n    async fetchMessages() {\n      try {\n        const response = await axios.get('getMessage');\n        this.messages = response.data;\n      } catch (error) {\n        console.error('Error fetching messages:', error);\n      }\n    }\n  },\n  mounted() {\n    // Fetch messages initially\n    this.fetchMessages();\n\n    // Set up periodic message fetching (adjust the interval as needed)\n    this.refreshInterval = setInterval(() => {\n      this.fetchMessages();\n    }, 5000); // Fetch messages every 5 seconds, for example\n  },\n\n  beforeDestroy() {\n    // Clear the refresh interval to prevent memory leaks\n    clearInterval(this.refreshInterval);\n  }\n};","map":{"version":3,"names":["ChatWindow","axios","components","data","messages","newMessage","refreshInterval","methods","sendMessage","trim","console","warn","post","message","fetchMessages","$emit","error","response","get","mounted","setInterval","beforeDestroy","clearInterval"],"sources":["C:\\Users\\user\\OneDrive\\Desktop\\HiyasProject\\src\\views\\ChatView.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <chat-window :messages=\"messages\" />\r\n    <input v-model=\"newMessage\" />\r\n    <button @click=\"sendMessage\">Send</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport ChatWindow from '@/components/ChatWindow.vue';\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  components: {\r\n    ChatWindow,\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      messages: [],\r\n      newMessage: '',\r\n      refreshInterval: null, // Added for periodic message fetching\r\n    };\r\n  },\r\n\r\n  methods: {\r\n    async sendMessage() {\r\n      try {\r\n        // Check if the newMessage is not empty before sending\r\n        if (this.newMessage.trim() === '') {\r\n          console.warn('Cannot send an empty message.');\r\n          return;\r\n        }\r\n\r\n        // Perform the Axios POST request to send the message\r\n        await axios.post('sendMessage', { message: this.newMessage });\r\n\r\n        // Fetch updated messages after sending\r\n        await this.fetchMessages();\r\n\r\n        // Optionally, you can emit an event to inform parent components\r\n        this.$emit('message-sent', this.newMessage);\r\n\r\n        // Clear the input field\r\n        this.newMessage = '';\r\n      } catch (error) {\r\n        console.error('Error sending message:', error);\r\n      }\r\n    },\r\n\r\n    async fetchMessages() {\r\n      try {\r\n        const response = await axios.get('getMessage');\r\n        this.messages = response.data;\r\n      } catch (error) {\r\n        console.error('Error fetching messages:', error);\r\n      }\r\n    },\r\n  },\r\n\r\n  mounted() {\r\n    // Fetch messages initially\r\n    this.fetchMessages();\r\n\r\n    // Set up periodic message fetching (adjust the interval as needed)\r\n    this.refreshInterval = setInterval(() => {\r\n      this.fetchMessages();\r\n    }, 5000); // Fetch messages every 5 seconds, for example\r\n  },\r\n\r\n  beforeDestroy() {\r\n    // Clear the refresh interval to prevent memory leaks\r\n    clearInterval(this.refreshInterval);\r\n  },\r\n};\r\n</script>\r\n"],"mappings":"AASA,OAAOA,UAAS,MAAO,6BAA6B;AACpD,OAAOC,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,UAAU,EAAE;IACVF;EACF,CAAC;EAEDG,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,UAAU,EAAE,EAAE;MACdC,eAAe,EAAE,IAAI,CAAE;IACzB,CAAC;EACH,CAAC;;EAEDC,OAAO,EAAE;IACP,MAAMC,WAAWA,CAAA,EAAG;MAClB,IAAI;QACF;QACA,IAAI,IAAI,CAACH,UAAU,CAACI,IAAI,CAAC,MAAM,EAAE,EAAE;UACjCC,OAAO,CAACC,IAAI,CAAC,+BAA+B,CAAC;UAC7C;QACF;;QAEA;QACA,MAAMV,KAAK,CAACW,IAAI,CAAC,aAAa,EAAE;UAAEC,OAAO,EAAE,IAAI,CAACR;QAAW,CAAC,CAAC;;QAE7D;QACA,MAAM,IAAI,CAACS,aAAa,CAAC,CAAC;;QAE1B;QACA,IAAI,CAACC,KAAK,CAAC,cAAc,EAAE,IAAI,CAACV,UAAU,CAAC;;QAE3C;QACA,IAAI,CAACA,UAAS,GAAI,EAAE;MACtB,EAAE,OAAOW,KAAK,EAAE;QACdN,OAAO,CAACM,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD;IACF,CAAC;IAED,MAAMF,aAAaA,CAAA,EAAG;MACpB,IAAI;QACF,MAAMG,QAAO,GAAI,MAAMhB,KAAK,CAACiB,GAAG,CAAC,YAAY,CAAC;QAC9C,IAAI,CAACd,QAAO,GAAIa,QAAQ,CAACd,IAAI;MAC/B,EAAE,OAAOa,KAAK,EAAE;QACdN,OAAO,CAACM,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD;IACF;EACF,CAAC;EAEDG,OAAOA,CAAA,EAAG;IACR;IACA,IAAI,CAACL,aAAa,CAAC,CAAC;;IAEpB;IACA,IAAI,CAACR,eAAc,GAAIc,WAAW,CAAC,MAAM;MACvC,IAAI,CAACN,aAAa,CAAC,CAAC;IACtB,CAAC,EAAE,IAAI,CAAC,EAAE;EACZ,CAAC;;EAEDO,aAAaA,CAAA,EAAG;IACd;IACAC,aAAa,CAAC,IAAI,CAAChB,eAAe,CAAC;EACrC;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}