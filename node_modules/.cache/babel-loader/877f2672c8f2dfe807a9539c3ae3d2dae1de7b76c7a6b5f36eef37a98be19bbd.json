{"ast":null,"code":"const columns = [{\n  name: 'name',\n  required: true,\n  label: 'Dessert (100g serving)',\n  align: 'left',\n  field: row => row.name,\n  format: val => `${val}`,\n  sortable: true\n}, {\n  name: 'calories',\n  align: 'center',\n  label: 'Calories',\n  field: 'calories',\n  sortable: true\n}, {\n  name: 'fat',\n  label: 'Fat (g)',\n  field: 'fat',\n  sortable: true\n}, {\n  name: 'carbs',\n  label: 'Carbs (g)',\n  field: 'carbs'\n}, {\n  name: 'protein',\n  label: 'Protein (g)',\n  field: 'protein'\n}, {\n  name: 'sodium',\n  label: 'Sodium (mg)',\n  field: 'sodium'\n}, {\n  name: 'calcium',\n  label: 'Calcium (%)',\n  field: 'calcium',\n  sortable: true,\n  sort: (a, b) => parseInt(a, 10) - parseInt(b, 10)\n}, {\n  name: 'iron',\n  label: 'Iron (%)',\n  field: 'iron',\n  sortable: true,\n  sort: (a, b) => parseInt(a, 10) - parseInt(b, 10)\n}];\nexport default {\n  setup() {\n    return {\n      columns,\n      rows\n    };\n  }\n};","map":{"version":3,"names":["columns","name","required","label","align","field","row","format","val","sortable","sort","a","b","parseInt","setup","rows"],"sources":["C:\\Users\\user\\OneDrive\\Desktop\\HiyasProject\\src\\components\\Student\\Table.vue"],"sourcesContent":["<template>\r\n    <div class=\"q-pa-md\">\r\n      <q-table\r\n        flat bordered\r\n        title=\"Treats\"\r\n        dense\r\n        :rows=\"rows\"\r\n        :columns=\"columns\"\r\n        row-key=\"name\"\r\n      />\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  const columns = [\r\n    {\r\n      name: 'name',\r\n      required: true,\r\n      label: 'Dessert (100g serving)',\r\n      align: 'left',\r\n      field: row => row.name,\r\n      format: val => `${val}`,\r\n      sortable: true\r\n    },\r\n    { name: 'calories', align: 'center', label: 'Calories', field: 'calories', sortable: true },\r\n    { name: 'fat', label: 'Fat (g)', field: 'fat', sortable: true },\r\n    { name: 'carbs', label: 'Carbs (g)', field: 'carbs' },\r\n    { name: 'protein', label: 'Protein (g)', field: 'protein' },\r\n    { name: 'sodium', label: 'Sodium (mg)', field: 'sodium' },\r\n    { name: 'calcium', label: 'Calcium (%)', field: 'calcium', sortable: true, sort: (a, b) => parseInt(a, 10) - parseInt(b, 10) },\r\n    { name: 'iron', label: 'Iron (%)', field: 'iron', sortable: true, sort: (a, b) => parseInt(a, 10) - parseInt(b, 10) }\r\n  ]\r\n  \r\n\r\n  \r\n  export default {\r\n    setup () {\r\n      return {\r\n        columns,\r\n        rows\r\n      }\r\n    }\r\n  }\r\n  </script>\r\n  "],"mappings":"AAcE,MAAMA,OAAM,GAAI,CACd;EACEC,IAAI,EAAE,MAAM;EACZC,QAAQ,EAAE,IAAI;EACdC,KAAK,EAAE,wBAAwB;EAC/BC,KAAK,EAAE,MAAM;EACbC,KAAK,EAAEC,GAAE,IAAKA,GAAG,CAACL,IAAI;EACtBM,MAAM,EAAEC,GAAE,IAAM,GAAEA,GAAI,EAAC;EACvBC,QAAQ,EAAE;AACZ,CAAC,EACD;EAAER,IAAI,EAAE,UAAU;EAAEG,KAAK,EAAE,QAAQ;EAAED,KAAK,EAAE,UAAU;EAAEE,KAAK,EAAE,UAAU;EAAEI,QAAQ,EAAE;AAAK,CAAC,EAC3F;EAAER,IAAI,EAAE,KAAK;EAAEE,KAAK,EAAE,SAAS;EAAEE,KAAK,EAAE,KAAK;EAAEI,QAAQ,EAAE;AAAK,CAAC,EAC/D;EAAER,IAAI,EAAE,OAAO;EAAEE,KAAK,EAAE,WAAW;EAAEE,KAAK,EAAE;AAAQ,CAAC,EACrD;EAAEJ,IAAI,EAAE,SAAS;EAAEE,KAAK,EAAE,aAAa;EAAEE,KAAK,EAAE;AAAU,CAAC,EAC3D;EAAEJ,IAAI,EAAE,QAAQ;EAAEE,KAAK,EAAE,aAAa;EAAEE,KAAK,EAAE;AAAS,CAAC,EACzD;EAAEJ,IAAI,EAAE,SAAS;EAAEE,KAAK,EAAE,aAAa;EAAEE,KAAK,EAAE,SAAS;EAAEI,QAAQ,EAAE,IAAI;EAAEC,IAAI,EAAEA,CAACC,CAAC,EAAEC,CAAC,KAAKC,QAAQ,CAACF,CAAC,EAAE,EAAE,IAAIE,QAAQ,CAACD,CAAC,EAAE,EAAE;AAAE,CAAC,EAC9H;EAAEX,IAAI,EAAE,MAAM;EAAEE,KAAK,EAAE,UAAU;EAAEE,KAAK,EAAE,MAAM;EAAEI,QAAQ,EAAE,IAAI;EAAEC,IAAI,EAAEA,CAACC,CAAC,EAAEC,CAAC,KAAKC,QAAQ,CAACF,CAAC,EAAE,EAAE,IAAIE,QAAQ,CAACD,CAAC,EAAE,EAAE;AAAE,EACtH;AAIA,eAAe;EACbE,KAAIA,CAAA,EAAK;IACP,OAAO;MACLd,OAAO;MACPe;IACF;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}