{"ast":null,"code":"import ChatWindow from '@/components/ChatWindow.vue';\nimport axios from 'axios';\nexport default {\n  components: {\n    ChatWindow\n  },\n  data() {\n    return {\n      messages: [],\n      newMessage: '',\n      refreshInterval: null\n    };\n  },\n  methods: {\n    async sendMessage() {\n      try {\n        if (this.newMessage.trim() === '') {\n          console.warn('Cannot send an empty message.');\n          return;\n        }\n        await axios.post('sendMessage', {\n          message: this.newMessage\n        });\n        await this.fetchMessages();\n        this.$emit('message-sent', this.newMessage);\n        this.newMessage = '';\n      } catch (error) {\n        console.error('Error sending message:', error);\n      }\n    },\n    async fetchMessages() {\n      try {\n        // Adjust the URL to include the logged-in user's information\n        const response = await axios.get('getMessage', {\n          params: {\n            // Add parameters based on your authentication mechanism\n            // For example, if you have a user ID, you might do:\n            userId: this.loggedInUserId\n          }\n        });\n        this.messages = response.data;\n      } catch (error) {\n        console.error('Error fetching messages:', error);\n      }\n    }\n  },\n  computed: {\n    loggedInUserId() {\n      // Retrieve the logged-in user's ID from your authentication state\n      // This is just an example; adjust based on your actual authentication mechanism\n      return this.$store.state.user.id;\n    }\n  },\n  mounted() {\n    this.fetchMessages();\n    this.refreshInterval = setInterval(() => {\n      this.fetchMessages();\n    }, 5000);\n  },\n  beforeDestroy() {\n    clearInterval(this.refreshInterval);\n  }\n};","map":{"version":3,"names":["ChatWindow","axios","components","data","messages","newMessage","refreshInterval","methods","sendMessage","trim","console","warn","post","message","fetchMessages","$emit","error","response","get","params","userId","loggedInUserId","computed","$store","state","user","id","mounted","setInterval","beforeDestroy","clearInterval"],"sources":["C:\\Users\\user\\OneDrive\\Desktop\\HiyasProject\\src\\views\\ChatView.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <chat-window :messages=\"messages\" />\r\n    <input v-model=\"newMessage\" />\r\n    <button @click=\"sendMessage\">Send</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport ChatWindow from '@/components/ChatWindow.vue';\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  components: {\r\n    ChatWindow,\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      messages: [],\r\n      newMessage: '',\r\n      refreshInterval: null,\r\n    };\r\n  },\r\n\r\n  methods: {\r\n    async sendMessage() {\r\n      try {\r\n        if (this.newMessage.trim() === '') {\r\n          console.warn('Cannot send an empty message.');\r\n          return;\r\n        }\r\n\r\n        await axios.post('sendMessage', { message: this.newMessage });\r\n        await this.fetchMessages();\r\n        this.$emit('message-sent', this.newMessage);\r\n        this.newMessage = '';\r\n      } catch (error) {\r\n        console.error('Error sending message:', error);\r\n      }\r\n    },\r\n\r\n    async fetchMessages() {\r\n      try {\r\n        // Adjust the URL to include the logged-in user's information\r\n        const response = await axios.get('getMessage', {\r\n          params: {\r\n            // Add parameters based on your authentication mechanism\r\n            // For example, if you have a user ID, you might do:\r\n            userId: this.loggedInUserId,\r\n          },\r\n        });\r\n\r\n        this.messages = response.data;\r\n      } catch (error) {\r\n        console.error('Error fetching messages:', error);\r\n      }\r\n    },\r\n  },\r\n\r\n  computed: {\r\n    loggedInUserId() {\r\n      // Retrieve the logged-in user's ID from your authentication state\r\n      // This is just an example; adjust based on your actual authentication mechanism\r\n      return this.$store.state.user.id;\r\n    },\r\n  },\r\n\r\n  mounted() {\r\n    this.fetchMessages();\r\n    this.refreshInterval = setInterval(() => {\r\n      this.fetchMessages();\r\n    }, 5000);\r\n  },\r\n\r\n  beforeDestroy() {\r\n    clearInterval(this.refreshInterval);\r\n  },\r\n};\r\n</script>\r\n"],"mappings":"AASA,OAAOA,UAAS,MAAO,6BAA6B;AACpD,OAAOC,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,UAAU,EAAE;IACVF;EACF,CAAC;EAEDG,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,UAAU,EAAE,EAAE;MACdC,eAAe,EAAE;IACnB,CAAC;EACH,CAAC;EAEDC,OAAO,EAAE;IACP,MAAMC,WAAWA,CAAA,EAAG;MAClB,IAAI;QACF,IAAI,IAAI,CAACH,UAAU,CAACI,IAAI,CAAC,MAAM,EAAE,EAAE;UACjCC,OAAO,CAACC,IAAI,CAAC,+BAA+B,CAAC;UAC7C;QACF;QAEA,MAAMV,KAAK,CAACW,IAAI,CAAC,aAAa,EAAE;UAAEC,OAAO,EAAE,IAAI,CAACR;QAAW,CAAC,CAAC;QAC7D,MAAM,IAAI,CAACS,aAAa,CAAC,CAAC;QAC1B,IAAI,CAACC,KAAK,CAAC,cAAc,EAAE,IAAI,CAACV,UAAU,CAAC;QAC3C,IAAI,CAACA,UAAS,GAAI,EAAE;MACtB,EAAE,OAAOW,KAAK,EAAE;QACdN,OAAO,CAACM,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD;IACF,CAAC;IAED,MAAMF,aAAaA,CAAA,EAAG;MACpB,IAAI;QACF;QACA,MAAMG,QAAO,GAAI,MAAMhB,KAAK,CAACiB,GAAG,CAAC,YAAY,EAAE;UAC7CC,MAAM,EAAE;YACN;YACA;YACAC,MAAM,EAAE,IAAI,CAACC;UACf;QACF,CAAC,CAAC;QAEF,IAAI,CAACjB,QAAO,GAAIa,QAAQ,CAACd,IAAI;MAC/B,EAAE,OAAOa,KAAK,EAAE;QACdN,OAAO,CAACM,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD;IACF;EACF,CAAC;EAEDM,QAAQ,EAAE;IACRD,cAAcA,CAAA,EAAG;MACf;MACA;MACA,OAAO,IAAI,CAACE,MAAM,CAACC,KAAK,CAACC,IAAI,CAACC,EAAE;IAClC;EACF,CAAC;EAEDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACb,aAAa,CAAC,CAAC;IACpB,IAAI,CAACR,eAAc,GAAIsB,WAAW,CAAC,MAAM;MACvC,IAAI,CAACd,aAAa,CAAC,CAAC;IACtB,CAAC,EAAE,IAAI,CAAC;EACV,CAAC;EAEDe,aAAaA,CAAA,EAAG;IACdC,aAAa,CAAC,IAAI,CAACxB,eAAe,CAAC;EACrC;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}