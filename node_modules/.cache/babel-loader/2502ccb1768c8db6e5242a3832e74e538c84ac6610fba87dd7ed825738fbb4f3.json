{"ast":null,"code":"import { ref, computed, onMounted, onBeforeUnmount } from 'vue';\nexport default {\n  setup() {\n    const cardVisible = ref(false);\n    const clicked = ref(false);\n    const toggleChat = () => {\n      cardVisible.value = !cardVisible.value;\n      clicked.value = !clicked.value; // Toggle the 'clicked' state\n    };\n\n    // Computed property to calculate button color based on 'clicked' state\n    const buttonColor = computed(() => clicked.value ? 'grey' : ''); // Set to 'red' when clicked, else empty\n\n    const chatItems = Array.from({\n      length: 8\n    }, (_, index) => ({\n      id: index + 1,\n      name: 'Jan',\n      message: 'Can we schedule a call for tomorrow?',\n      time: '1 min',\n      avatarSrc: 'https://cdn.quasar.dev/img/avatar4.jpg'\n    }));\n    const handleGlobalClick = event => {\n      // Check if the clicked element is outside the button and the notification card\n      const isOutsideButton = !event.target.closest('.q-btn');\n      const isOutsideNotificationCard = !event.target.closest('.notification-card');\n\n      // Close the notification card if it's open and the click is outside both the button and the card\n      if (cardVisible.value && isOutsideButton && isOutsideNotificationCard) {\n        cardVisible.value = false;\n        clicked.value = false;\n      }\n    };\n\n    // Close the notification card when a global click event is emitted from another component\n    const closeNotificationCard = () => {\n      cardVisible.value = false;\n      clicked.value = false;\n    };\n\n    // Add and remove the global click event listener when the component is mounted and unmounted\n    onMounted(() => {\n      document.addEventListener('click', handleGlobalClick);\n    });\n    onBeforeUnmount(() => {\n      document.removeEventListener('click', handleGlobalClick);\n    });\n\n    // Listen for global events from other components\n    window.addEventListener('closeNotificationCard', closeNotificationCard);\n    return {\n      cardVisible,\n      toggleChat,\n      buttonColor,\n      // Expose the computed 'buttonColor' to the template\n      chatItems,\n      handleGlobalClick\n    };\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","onBeforeUnmount","setup","cardVisible","clicked","toggleChat","value","buttonColor","chatItems","Array","from","length","_","index","id","name","message","time","avatarSrc","handleGlobalClick","event","isOutsideButton","target","closest","isOutsideNotificationCard","closeNotificationCard","document","addEventListener","removeEventListener","window"],"sources":["C:\\Users\\user\\OneDrive\\Desktop\\HiyasProject\\src\\components\\Chats.vue"],"sourcesContent":["<template>\r\n    <q-btn dense round :color=\"buttonColor\" class=\"q-mr-md\" @click=\"toggleChat\">\r\n        <q-icon name=\"messages\" style=\"color: black;\" />\r\n        <q-badge color=\"red\" floating>1</q-badge>\r\n    </q-btn>\r\n\r\n    <div class=\"row one justify-center\">\r\n        <div class=\"chat-card\" v-if=\"cardVisible\">\r\n            <q-card bordered class=\"my-card\">\r\n                <div class=\"scrollable-list\">\r\n                    <q-list bordered class=\"rounded-borders\" style=\"max-width: 350px\">\r\n                        <div class=\"row\">\r\n                            <div class=\"row col-5 items-start q-pa-md\">Chats</div>\r\n                            <div class=\"row col-7 justify-end\">\r\n                                <q-btn flat dense icon=\"fullscreen\" v-close-popup />\r\n                            </div>\r\n                        </div>\r\n                        <q-separator />\r\n\r\n                        <template v-for=\"item in chatItems\" :key=\"item.id\">\r\n                            <q-item clickable v-ripple>\r\n                                <q-item-section avatar>\r\n                                    <q-avatar>\r\n                                        <img :src=\"item.avatarSrc\" />\r\n                                    </q-avatar>\r\n                                </q-item-section>\r\n\r\n                                <q-item-section>\r\n                                    <q-item-label lines=\"1\">{{ item.name }}</q-item-label>\r\n                                    <q-item-label caption lines=\"1\">{{ item.message }}</q-item-label>\r\n                                </q-item-section>\r\n\r\n                                <q-item-section side top>\r\n                                    <q-item-label caption>{{ item.time }}</q-item-label>\r\n                                </q-item-section>\r\n                            </q-item>\r\n                            <q-separator />\r\n                        </template>\r\n                    </q-list>\r\n                </div>\r\n            </q-card>\r\n        </div>\r\n    </div>\r\n</template>\r\n  \r\n<script>\r\nimport { ref, computed, onMounted, onBeforeUnmount } from 'vue';\r\n\r\n\r\nexport default {\r\n    setup() {\r\n        const cardVisible = ref(false);\r\n        const clicked = ref(false);\r\n\r\n        const toggleChat = () => {\r\n            cardVisible.value = !cardVisible.value;\r\n            clicked.value = !clicked.value; // Toggle the 'clicked' state\r\n        };\r\n\r\n        // Computed property to calculate button color based on 'clicked' state\r\n        const buttonColor = computed(() => (clicked.value ? 'grey' : '')); // Set to 'red' when clicked, else empty\r\n\r\n        const chatItems = Array.from({ length: 8 }, (_, index) => ({\r\n            id: index + 1,\r\n            name: 'Jan',\r\n            message: 'Can we schedule a call for tomorrow?',\r\n            time: '1 min',\r\n            avatarSrc: 'https://cdn.quasar.dev/img/avatar4.jpg',\r\n        }));\r\n\r\n        const handleGlobalClick = (event) => {\r\n            // Check if the clicked element is outside the button and the notification card\r\n            const isOutsideButton = !event.target.closest('.q-btn');\r\n            const isOutsideNotificationCard = !event.target.closest('.notification-card');\r\n\r\n            // Close the notification card if it's open and the click is outside both the button and the card\r\n            if (cardVisible.value && isOutsideButton && isOutsideNotificationCard) {\r\n                cardVisible.value = false;\r\n                clicked.value = false;\r\n            }\r\n        };\r\n\r\n        // Close the notification card when a global click event is emitted from another component\r\n        const closeNotificationCard = () => {\r\n            cardVisible.value = false;\r\n            clicked.value = false;\r\n        };\r\n\r\n        // Add and remove the global click event listener when the component is mounted and unmounted\r\n        onMounted(() => {\r\n            document.addEventListener('click', handleGlobalClick);\r\n        });\r\n\r\n        onBeforeUnmount(() => {\r\n            document.removeEventListener('click', handleGlobalClick);\r\n        });\r\n\r\n        // Listen for global events from other components\r\n        window.addEventListener('closeNotificationCard', closeNotificationCard);\r\n\r\n        return {\r\n            cardVisible,\r\n            toggleChat,\r\n            buttonColor, // Expose the computed 'buttonColor' to the template\r\n            chatItems,\r\n            handleGlobalClick\r\n        };\r\n    },\r\n};\r\n</script>\r\n  \r\n<style lang=\"sass\" scoped>\r\n  .my-card\r\n    width: 350px\r\n    max-width: 100%\r\n    color: black\r\n  \r\n  .scrollable-list\r\n    max-height: 450px \r\n    overflow-y: auto\r\n  \r\n  .one\r\n    background-color: black\r\n  \r\n  .chat-card\r\n    position: absolute\r\n    z-index: 1\r\n    top: 0\r\n    right: 0\r\n    margin-top: 55px\r\n    margin-right: 10px\r\n  </style>\r\n  "],"mappings":"AA8CA,SAASA,GAAG,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,eAAc,QAAS,KAAK;AAG/D,eAAe;EACXC,KAAKA,CAAA,EAAG;IACJ,MAAMC,WAAU,GAAIL,GAAG,CAAC,KAAK,CAAC;IAC9B,MAAMM,OAAM,GAAIN,GAAG,CAAC,KAAK,CAAC;IAE1B,MAAMO,UAAS,GAAIA,CAAA,KAAM;MACrBF,WAAW,CAACG,KAAI,GAAI,CAACH,WAAW,CAACG,KAAK;MACtCF,OAAO,CAACE,KAAI,GAAI,CAACF,OAAO,CAACE,KAAK,EAAE;IACpC,CAAC;;IAED;IACA,MAAMC,WAAU,GAAIR,QAAQ,CAAC,MAAOK,OAAO,CAACE,KAAI,GAAI,MAAK,GAAI,EAAG,CAAC,EAAE;;IAEnE,MAAME,SAAQ,GAAIC,KAAK,CAACC,IAAI,CAAC;MAAEC,MAAM,EAAE;IAAE,CAAC,EAAE,CAACC,CAAC,EAAEC,KAAK,MAAM;MACvDC,EAAE,EAAED,KAAI,GAAI,CAAC;MACbE,IAAI,EAAE,KAAK;MACXC,OAAO,EAAE,sCAAsC;MAC/CC,IAAI,EAAE,OAAO;MACbC,SAAS,EAAE;IACf,CAAC,CAAC,CAAC;IAEH,MAAMC,iBAAgB,GAAKC,KAAK,IAAK;MACjC;MACA,MAAMC,eAAc,GAAI,CAACD,KAAK,CAACE,MAAM,CAACC,OAAO,CAAC,QAAQ,CAAC;MACvD,MAAMC,yBAAwB,GAAI,CAACJ,KAAK,CAACE,MAAM,CAACC,OAAO,CAAC,oBAAoB,CAAC;;MAE7E;MACA,IAAIpB,WAAW,CAACG,KAAI,IAAKe,eAAc,IAAKG,yBAAyB,EAAE;QACnErB,WAAW,CAACG,KAAI,GAAI,KAAK;QACzBF,OAAO,CAACE,KAAI,GAAI,KAAK;MACzB;IACJ,CAAC;;IAED;IACA,MAAMmB,qBAAoB,GAAIA,CAAA,KAAM;MAChCtB,WAAW,CAACG,KAAI,GAAI,KAAK;MACzBF,OAAO,CAACE,KAAI,GAAI,KAAK;IACzB,CAAC;;IAED;IACAN,SAAS,CAAC,MAAM;MACZ0B,QAAQ,CAACC,gBAAgB,CAAC,OAAO,EAAER,iBAAiB,CAAC;IACzD,CAAC,CAAC;IAEFlB,eAAe,CAAC,MAAM;MAClByB,QAAQ,CAACE,mBAAmB,CAAC,OAAO,EAAET,iBAAiB,CAAC;IAC5D,CAAC,CAAC;;IAEF;IACAU,MAAM,CAACF,gBAAgB,CAAC,uBAAuB,EAAEF,qBAAqB,CAAC;IAEvE,OAAO;MACHtB,WAAW;MACXE,UAAU;MACVE,WAAW;MAAE;MACbC,SAAS;MACTW;IACJ,CAAC;EACL;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}