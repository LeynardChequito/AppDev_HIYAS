{"ast":null,"code":"import ChatWindow from '@/components/ChatWindow.vue';\nimport axios from 'axios';\nimport axiosInstance from '../views/LoginView.vue';\nexport default {\n  components: {\n    ChatWindow\n  },\n  data() {\n    return {\n      messages: [],\n      newMessage: ''\n    };\n  },\n  methods: {\n    async sendMessage() {\n      try {\n        // Get the token from local storage\n        const token = localStorage.getItem('token');\n\n        // Check if the token is available\n        if (token) {\n          // Set the Authorization header for the 'sendMessage' request\n          axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n        } else {\n          console.error('No token available.');\n          return;\n        }\n\n        // Perform the Axios POST request to send the message\n        await axios.post('sendMessage', {\n          message: this.newMessage\n        });\n\n        // Assuming you want to fetch updated messages after sending\n        await this.fetchMessages();\n\n        // Optionally, you can emit an event to inform parent components\n        this.$emit('message-sent', this.newMessage);\n\n        // Clear the input field\n        this.newMessage = '';\n      } catch (error) {\n        console.error('Error sending message:', error);\n      }\n    },\n    async fetchMessages() {\n      try {\n        // Get the token from local storage\n        const token = localStorage.getItem('token');\n\n        // Check if the token is available\n        if (token) {\n          // Set the Authorization header for the 'getMessage' request\n          axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n        } else {\n          console.error('No token available.');\n          return;\n        }\n\n        // Perform the Axios GET request to fetch messages\n        const response = await axios.get('getMessage');\n        this.messages = response.data;\n      } catch (error) {\n        console.error('Error fetching messages:', error);\n      }\n    }\n  },\n  mounted() {\n    this.fetchMessages();\n  }\n};","map":{"version":3,"names":["ChatWindow","axios","axiosInstance","components","data","messages","newMessage","methods","sendMessage","token","localStorage","getItem","defaults","headers","common","console","error","post","message","fetchMessages","$emit","response","get","mounted"],"sources":["C:\\Users\\user\\OneDrive\\Desktop\\HiyasProject\\src\\views\\ChatView.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <chat-window :messages=\"messages\" />\r\n    <input v-model=\"newMessage\" />\r\n    <button @click=\"sendMessage\">Send</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport ChatWindow from '@/components/ChatWindow.vue';\r\nimport axios from 'axios';\r\nimport axiosInstance from '../views/LoginView.vue';\r\n\r\nexport default {\r\n  components: {\r\n    ChatWindow,\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      messages: [],\r\n      newMessage: '',\r\n    };\r\n  },\r\n\r\n  methods: {\r\n    async sendMessage() {\r\n      try {\r\n        // Get the token from local storage\r\n        const token = localStorage.getItem('token');\r\n\r\n        // Check if the token is available\r\n        if (token) {\r\n          // Set the Authorization header for the 'sendMessage' request\r\n          axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n        } else {\r\n          console.error('No token available.');\r\n          return;\r\n        }\r\n\r\n        // Perform the Axios POST request to send the message\r\n        await axios.post('sendMessage', { message: this.newMessage });\r\n\r\n        // Assuming you want to fetch updated messages after sending\r\n        await this.fetchMessages();\r\n\r\n        // Optionally, you can emit an event to inform parent components\r\n        this.$emit('message-sent', this.newMessage);\r\n\r\n        // Clear the input field\r\n        this.newMessage = '';\r\n      } catch (error) {\r\n        console.error('Error sending message:', error);\r\n      }\r\n    },\r\n\r\n    async fetchMessages() {\r\n      try {\r\n        // Get the token from local storage\r\n        const token = localStorage.getItem('token');\r\n\r\n        // Check if the token is available\r\n        if (token) {\r\n          // Set the Authorization header for the 'getMessage' request\r\n          axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n        } else {\r\n          console.error('No token available.');\r\n          return;\r\n        }\r\n\r\n        // Perform the Axios GET request to fetch messages\r\n        const response = await axios.get('getMessage');\r\n        this.messages = response.data;\r\n      } catch (error) {\r\n        console.error('Error fetching messages:', error);\r\n      }\r\n    },\r\n  },\r\n\r\n  mounted() {\r\n    this.fetchMessages();\r\n  },\r\n};\r\n</script>\r\n"],"mappings":"AASA,OAAOA,UAAS,MAAO,6BAA6B;AACpD,OAAOC,KAAI,MAAO,OAAO;AACzB,OAAOC,aAAY,MAAO,wBAAwB;AAElD,eAAe;EACbC,UAAU,EAAE;IACVH;EACF,CAAC;EAEDI,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,UAAU,EAAE;IACd,CAAC;EACH,CAAC;EAEDC,OAAO,EAAE;IACP,MAAMC,WAAWA,CAAA,EAAG;MAClB,IAAI;QACF;QACA,MAAMC,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;;QAE3C;QACA,IAAIF,KAAK,EAAE;UACT;UACAR,KAAK,CAACW,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,IAAK,UAASL,KAAM,EAAC;QACpE,OAAO;UACLM,OAAO,CAACC,KAAK,CAAC,qBAAqB,CAAC;UACpC;QACF;;QAEA;QACA,MAAMf,KAAK,CAACgB,IAAI,CAAC,aAAa,EAAE;UAAEC,OAAO,EAAE,IAAI,CAACZ;QAAW,CAAC,CAAC;;QAE7D;QACA,MAAM,IAAI,CAACa,aAAa,CAAC,CAAC;;QAE1B;QACA,IAAI,CAACC,KAAK,CAAC,cAAc,EAAE,IAAI,CAACd,UAAU,CAAC;;QAE3C;QACA,IAAI,CAACA,UAAS,GAAI,EAAE;MACtB,EAAE,OAAOU,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD;IACF,CAAC;IAED,MAAMG,aAAaA,CAAA,EAAG;MACpB,IAAI;QACF;QACA,MAAMV,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;;QAE3C;QACA,IAAIF,KAAK,EAAE;UACT;UACAR,KAAK,CAACW,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,IAAK,UAASL,KAAM,EAAC;QACpE,OAAO;UACLM,OAAO,CAACC,KAAK,CAAC,qBAAqB,CAAC;UACpC;QACF;;QAEA;QACA,MAAMK,QAAO,GAAI,MAAMpB,KAAK,CAACqB,GAAG,CAAC,YAAY,CAAC;QAC9C,IAAI,CAACjB,QAAO,GAAIgB,QAAQ,CAACjB,IAAI;MAC/B,EAAE,OAAOY,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD;IACF;EACF,CAAC;EAEDO,OAAOA,CAAA,EAAG;IACR,IAAI,CAACJ,aAAa,CAAC,CAAC;EACtB;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}