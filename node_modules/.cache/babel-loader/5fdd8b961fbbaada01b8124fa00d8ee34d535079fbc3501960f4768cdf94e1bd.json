{"ast":null,"code":"import axios from 'axios';\nconst authService = {\n  async login(credentials) {\n    try {\n      // Replace the URL with your actual login endpoint\n      const response = await axios.post('/login', credentials);\n\n      // Assuming your server sends the token in the response\n      const token = response.data.token;\n\n      // Save the token to localStorage or a secure storage\n      localStorage.setItem('token', token);\n\n      // Set the Authorization header for future requests\n      this.setAuthHeader();\n      return {\n        success: true,\n        message: 'Login successful'\n      };\n    } catch (error) {\n      console.error('Error logging in:', error);\n      return {\n        success: false,\n        message: 'Login failed'\n      };\n    }\n  },\n  logout() {\n    // Perform logout logic, remove the token from storage\n    localStorage.removeItem('token');\n  },\n  isAuthenticated() {\n    // Check if the user is authenticated (e.g., token exists)\n    return !!this.getToken();\n  },\n  getToken() {\n    // Retrieve the authentication token from storage\n    return localStorage.getItem('token');\n  },\n  setAuthHeader() {\n    // Set the Authorization header for Axios requests\n    return localStorage.getItem('token');\n    const token = this.getToken();\n    if (token) {\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    }\n  }\n};\nexport default authService;","map":{"version":3,"names":["axios","authService","login","credentials","response","post","token","data","localStorage","setItem","setAuthHeader","success","message","error","console","logout","removeItem","isAuthenticated","getToken","getItem","defaults","headers","common"],"sources":["C:/Users/user/OneDrive/Desktop/HiyasProject/src/JWT/authService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst authService = {\r\n  async login(credentials) {\r\n    try {\r\n      // Replace the URL with your actual login endpoint\r\n      const response = await axios.post('/login', credentials);\r\n\r\n      // Assuming your server sends the token in the response\r\n      const token = response.data.token;\r\n\r\n      // Save the token to localStorage or a secure storage\r\n      localStorage.setItem('token', token);\r\n\r\n      // Set the Authorization header for future requests\r\n      this.setAuthHeader();\r\n\r\n      return { success: true, message: 'Login successful' };\r\n    } catch (error) {\r\n      console.error('Error logging in:', error);\r\n      return { success: false, message: 'Login failed' };\r\n    }\r\n  },\r\n  logout() {\r\n    // Perform logout logic, remove the token from storage\r\n    localStorage.removeItem('token');\r\n  },\r\n  isAuthenticated() {\r\n    // Check if the user is authenticated (e.g., token exists)\r\n    return !!this.getToken();\r\n  },\r\n  getToken() {\r\n    // Retrieve the authentication token from storage\r\n    return localStorage.getItem('token');\r\n  },\r\n  setAuthHeader() {\r\n    // Set the Authorization header for Axios requests\r\n    return localStorage.getItem('token');\r\n    const token = this.getToken();\r\n    if (token) {\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n    }\r\n  },\r\n};\r\n\r\nexport default authService;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,WAAW,GAAG;EAClB,MAAMC,KAAKA,CAACC,WAAW,EAAE;IACvB,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAC,QAAQ,EAAEF,WAAW,CAAC;;MAExD;MACA,MAAMG,KAAK,GAAGF,QAAQ,CAACG,IAAI,CAACD,KAAK;;MAEjC;MACAE,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,KAAK,CAAC;;MAEpC;MACA,IAAI,CAACI,aAAa,CAAC,CAAC;MAEpB,OAAO;QAAEC,OAAO,EAAE,IAAI;QAAEC,OAAO,EAAE;MAAmB,CAAC;IACvD,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;MACzC,OAAO;QAAEF,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAE;MAAe,CAAC;IACpD;EACF,CAAC;EACDG,MAAMA,CAAA,EAAG;IACP;IACAP,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC;EAClC,CAAC;EACDC,eAAeA,CAAA,EAAG;IAChB;IACA,OAAO,CAAC,CAAC,IAAI,CAACC,QAAQ,CAAC,CAAC;EAC1B,CAAC;EACDA,QAAQA,CAAA,EAAG;IACT;IACA,OAAOV,YAAY,CAACW,OAAO,CAAC,OAAO,CAAC;EACtC,CAAC;EACDT,aAAaA,CAAA,EAAG;IACd;IACA,OAAOF,YAAY,CAACW,OAAO,CAAC,OAAO,CAAC;IACpC,MAAMb,KAAK,GAAG,IAAI,CAACY,QAAQ,CAAC,CAAC;IAC7B,IAAIZ,KAAK,EAAE;MACTN,KAAK,CAACoB,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAI,UAAShB,KAAM,EAAC;IACpE;EACF;AACF,CAAC;AAED,eAAeL,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}