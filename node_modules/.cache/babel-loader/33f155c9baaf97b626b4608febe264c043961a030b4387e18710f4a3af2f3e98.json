{"ast":null,"code":"import { h, computed } from 'vue';\nimport QBtn from '../btn/QBtn.js';\nimport QBtnGroup from '../btn-group/QBtnGroup.js';\nimport { createComponent } from '../../utils/private/create.js';\nimport { useFormInject, useFormProps } from '../../composables/private/use-form.js';\nimport { hMergeSlot } from '../../utils/private/render.js';\nimport { getBtnDesignAttr } from '../btn/use-btn.js';\nexport default createComponent({\n  name: 'QBtnToggle',\n  props: {\n    ...useFormProps,\n    modelValue: {\n      required: true\n    },\n    options: {\n      type: Array,\n      required: true,\n      validator: v => v.every(opt => ('label' in opt || 'icon' in opt || 'slot' in opt) && 'value' in opt)\n    },\n    // To avoid seeing the active raise shadow through\n    // the transparent button, give it a color (even white)\n    color: String,\n    textColor: String,\n    toggleColor: {\n      type: String,\n      default: 'primary'\n    },\n    toggleTextColor: String,\n    outline: Boolean,\n    flat: Boolean,\n    unelevated: Boolean,\n    rounded: Boolean,\n    push: Boolean,\n    glossy: Boolean,\n    size: String,\n    padding: String,\n    noCaps: Boolean,\n    noWrap: Boolean,\n    dense: Boolean,\n    readonly: Boolean,\n    disable: Boolean,\n    stack: Boolean,\n    stretch: Boolean,\n    spread: Boolean,\n    clearable: Boolean,\n    ripple: {\n      type: [Boolean, Object],\n      default: true\n    }\n  },\n  emits: ['update:modelValue', 'clear', 'click'],\n  setup(props, {\n    slots,\n    emit\n  }) {\n    const hasActiveValue = computed(() => props.options.find(opt => opt.value === props.modelValue) !== void 0);\n    const formAttrs = computed(() => ({\n      type: 'hidden',\n      name: props.name,\n      value: props.modelValue\n    }));\n    const injectFormInput = useFormInject(formAttrs);\n    const btnDesignAttr = computed(() => getBtnDesignAttr(props));\n    const btnOptionDesign = computed(() => ({\n      rounded: props.rounded,\n      dense: props.dense,\n      ...btnDesignAttr.value\n    }));\n    const btnOptions = computed(() => props.options.map((item, i) => {\n      const {\n        attrs,\n        value,\n        slot,\n        ...opt\n      } = item;\n      return {\n        slot,\n        props: {\n          key: i,\n          'aria-pressed': value === props.modelValue ? 'true' : 'false',\n          ...attrs,\n          ...opt,\n          ...btnOptionDesign.value,\n          disable: props.disable === true || opt.disable === true,\n          // Options that come from the button specific options first, then from general props\n          color: value === props.modelValue ? mergeOpt(opt, 'toggleColor') : mergeOpt(opt, 'color'),\n          textColor: value === props.modelValue ? mergeOpt(opt, 'toggleTextColor') : mergeOpt(opt, 'textColor'),\n          noCaps: mergeOpt(opt, 'noCaps') === true,\n          noWrap: mergeOpt(opt, 'noWrap') === true,\n          size: mergeOpt(opt, 'size'),\n          padding: mergeOpt(opt, 'padding'),\n          ripple: mergeOpt(opt, 'ripple'),\n          stack: mergeOpt(opt, 'stack') === true,\n          stretch: mergeOpt(opt, 'stretch') === true,\n          onClick(e) {\n            set(value, item, e);\n          }\n        }\n      };\n    }));\n    function set(value, opt, e) {\n      if (props.readonly !== true) {\n        if (props.modelValue === value) {\n          if (props.clearable === true) {\n            emit('update:modelValue', null, null);\n            emit('clear');\n          }\n        } else {\n          emit('update:modelValue', value, opt);\n        }\n        emit('click', e);\n      }\n    }\n    function mergeOpt(opt, key) {\n      return opt[key] === void 0 ? props[key] : opt[key];\n    }\n    function getContent() {\n      const child = btnOptions.value.map(opt => {\n        return h(QBtn, opt.props, opt.slot !== void 0 ? slots[opt.slot] : void 0);\n      });\n      if (props.name !== void 0 && props.disable !== true && hasActiveValue.value === true) {\n        injectFormInput(child, 'push');\n      }\n      return hMergeSlot(slots.default, child);\n    }\n    return () => h(QBtnGroup, {\n      class: 'q-btn-toggle',\n      ...btnDesignAttr.value,\n      rounded: props.rounded,\n      stretch: props.stretch,\n      glossy: props.glossy,\n      spread: props.spread\n    }, getContent);\n  }\n});","map":{"version":3,"names":["h","computed","QBtn","QBtnGroup","createComponent","useFormInject","useFormProps","hMergeSlot","getBtnDesignAttr","name","props","modelValue","required","options","type","Array","validator","v","every","opt","color","String","textColor","toggleColor","default","toggleTextColor","outline","Boolean","flat","unelevated","rounded","push","glossy","size","padding","noCaps","noWrap","dense","readonly","disable","stack","stretch","spread","clearable","ripple","Object","emits","setup","slots","emit","hasActiveValue","find","value","formAttrs","injectFormInput","btnDesignAttr","btnOptionDesign","btnOptions","map","item","i","attrs","slot","key","mergeOpt","onClick","e","set","getContent","child","class"],"sources":["C:/Users/user/OneDrive/Desktop/HiyasProject/node_modules/quasar/src/components/btn-toggle/QBtnToggle.js"],"sourcesContent":["import { h, computed } from 'vue'\n\nimport QBtn from '../btn/QBtn.js'\nimport QBtnGroup from '../btn-group/QBtnGroup.js'\n\nimport { createComponent } from '../../utils/private/create.js'\nimport { useFormInject, useFormProps } from '../../composables/private/use-form.js'\n\nimport { hMergeSlot } from '../../utils/private/render.js'\nimport { getBtnDesignAttr } from '../btn/use-btn.js'\n\nexport default createComponent({\n  name: 'QBtnToggle',\n\n  props: {\n    ...useFormProps,\n\n    modelValue: {\n      required: true\n    },\n\n    options: {\n      type: Array,\n      required: true,\n      validator: v => v.every(\n        opt => ('label' in opt || 'icon' in opt || 'slot' in opt) && 'value' in opt\n      )\n    },\n\n    // To avoid seeing the active raise shadow through\n    // the transparent button, give it a color (even white)\n    color: String,\n    textColor: String,\n    toggleColor: {\n      type: String,\n      default: 'primary'\n    },\n    toggleTextColor: String,\n\n    outline: Boolean,\n    flat: Boolean,\n    unelevated: Boolean,\n    rounded: Boolean,\n    push: Boolean,\n    glossy: Boolean,\n\n    size: String,\n    padding: String,\n\n    noCaps: Boolean,\n    noWrap: Boolean,\n    dense: Boolean,\n    readonly: Boolean,\n    disable: Boolean,\n\n    stack: Boolean,\n    stretch: Boolean,\n\n    spread: Boolean,\n\n    clearable: Boolean,\n\n    ripple: {\n      type: [ Boolean, Object ],\n      default: true\n    }\n  },\n\n  emits: [ 'update:modelValue', 'clear', 'click' ],\n\n  setup (props, { slots, emit }) {\n    const hasActiveValue = computed(() =>\n      props.options.find(opt => opt.value === props.modelValue) !== void 0\n    )\n\n    const formAttrs = computed(() => ({\n      type: 'hidden',\n      name: props.name,\n      value: props.modelValue\n    }))\n\n    const injectFormInput = useFormInject(formAttrs)\n\n    const btnDesignAttr = computed(() => getBtnDesignAttr(props))\n\n    const btnOptionDesign = computed(() => ({\n      rounded: props.rounded,\n      dense: props.dense,\n      ...btnDesignAttr.value\n    }))\n\n    const btnOptions = computed(() => props.options.map((item, i) => {\n      const { attrs, value, slot, ...opt } = item\n\n      return {\n        slot,\n        props: {\n          key: i,\n\n          'aria-pressed': value === props.modelValue ? 'true' : 'false',\n          ...attrs,\n          ...opt,\n          ...btnOptionDesign.value,\n\n          disable: props.disable === true || opt.disable === true,\n\n          // Options that come from the button specific options first, then from general props\n          color: value === props.modelValue\n            ? mergeOpt(opt, 'toggleColor')\n            : mergeOpt(opt, 'color'),\n          textColor: value === props.modelValue\n            ? mergeOpt(opt, 'toggleTextColor')\n            : mergeOpt(opt, 'textColor'),\n          noCaps: mergeOpt(opt, 'noCaps') === true,\n          noWrap: mergeOpt(opt, 'noWrap') === true,\n\n          size: mergeOpt(opt, 'size'),\n          padding: mergeOpt(opt, 'padding'),\n          ripple: mergeOpt(opt, 'ripple'),\n          stack: mergeOpt(opt, 'stack') === true,\n          stretch: mergeOpt(opt, 'stretch') === true,\n\n          onClick (e) { set(value, item, e) }\n        }\n      }\n    }))\n\n    function set (value, opt, e) {\n      if (props.readonly !== true) {\n        if (props.modelValue === value) {\n          if (props.clearable === true) {\n            emit('update:modelValue', null, null)\n            emit('clear')\n          }\n        }\n        else {\n          emit('update:modelValue', value, opt)\n        }\n\n        emit('click', e)\n      }\n    }\n\n    function mergeOpt (opt, key) {\n      return opt[ key ] === void 0 ? props[ key ] : opt[ key ]\n    }\n\n    function getContent () {\n      const child = btnOptions.value.map(opt => {\n        return h(QBtn, opt.props, opt.slot !== void 0 ? slots[ opt.slot ] : void 0)\n      })\n\n      if (props.name !== void 0 && props.disable !== true && hasActiveValue.value === true) {\n        injectFormInput(child, 'push')\n      }\n\n      return hMergeSlot(slots.default, child)\n    }\n\n    return () => h(QBtnGroup, {\n      class: 'q-btn-toggle',\n      ...btnDesignAttr.value,\n      rounded: props.rounded,\n      stretch: props.stretch,\n      glossy: props.glossy,\n      spread: props.spread\n    }, getContent)\n  }\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}